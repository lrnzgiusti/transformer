[tool.ruff]
lint.select = [ # See https://docs.astral.sh/ruff/rules/
  "F",    # flake8 (pyflakes)
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "I",    # isort
  "N",    # pep8-naming
  "D",    # flake8-docstrings (pydocstyle)
  "UP",   # pyupgrade
  "S",    # flake8-bandit
  "BLE",  # flake8-blind-except
  "FBT",  # flake8-boolean-trap maybe add this
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger (to remove breakpoint())
  "EM",   # flake8-errmsg
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise (to remove unused parethesis in raise)
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots (enforce __slots__ for some subclasses)
  "SIM",  # flake8-simplify
  "TID",  # flask8-tidy-imports
  "TCH",  # flake8-type-checking
  "PTH",  # flake8-use-pathlib
  "PGH",  # pygrep-hooks (mostly to check for invalid-mock-access)
  "TRY",  # tryceratops
  "NPY",  # numpy-specific rules
  "PERF", # perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # ruff-specific rules
]
lint.ignore = [
  "PTH123",  # be able to use open(path) instead of only path.open()
  "PT013",   # be able to do from pytest import ... instead of only import pytest
  "G004",    # be able to use f-strings in logging
  "FURB103", # be able to use `open` and `write`
]
line-length = 120

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "SLF", "INP"]
"config/**/*.py" = ["INP", "EM", "TRY003"]
"dvc/**/*.py" = ["INP"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "--cov=src/ -v --cov-report=term-missing --durations=20 --no-cov-on-fail"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "requires_trainable_backend: mark test for trainable backend only",
  "integration: mark test as an integration test",
]
